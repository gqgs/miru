//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x000000003f800000
GLOBL LCDATA1<>(SB), 8, $8

TEXT Â·__Z16compare_hist_avxPfS_S_S_S_S_S_(SB), $16-56

    MOVQ h1r+0(FP), DI
    MOVQ h2r+8(FP), SI
    MOVQ h1g+16(FP), DX
    MOVQ h2g+24(FP), CX
    MOVQ h1b+32(FP), R8
    MOVQ h2b+40(FP), R9
    MOVQ result+48(FP), R10
    ADDQ $8, SP
    MOVQ R10, 0(SP)
    LEAQ LCDATA1<>(SB), BP

    LONG $0xc057f8c5             // vxorps    xmm0, xmm0, xmm0
    LONG $0xf8c0c748; WORD $0xffff; BYTE $0xff // mov    rax, -8
    LONG $0x24148b4c             // mov    r10, qword 0[rsp] /* [rbp + 16] */
    LONG $0x187de2c4; WORD $0x004d // vbroadcastss    ymm1, dword 0[rbp] /* [rip + .LCPI0_0] */
    LONG $0xd257e8c5             // vxorps    xmm2, xmm2, xmm2
LBB0_1:
    LONG $0x5c10fcc5; WORD $0x2087 // vmovups    ymm3, yword [rdi + 4*rax + 32]
    LONG $0x6410fcc5; WORD $0x2086 // vmovups    ymm4, yword [rsi + 4*rax + 32]
    LONG $0xec58e4c5             // vaddps    ymm5, ymm3, ymm4
    LONG $0xf55ef4c5             // vdivps    ymm6, ymm1, ymm5
    LONG $0xdc5ce4c5             // vsubps    ymm3, ymm3, ymm4
    LONG $0xdb59e4c5             // vmulps    ymm3, ymm3, ymm3
    LONG $0x6410fcc5; WORD $0x2082 // vmovups    ymm4, yword [rdx + 4*rax + 32]
    LONG $0xe8c2d4c5; BYTE $0x0c // vcmpneq_oqps    ymm5, ymm5, ymm0
    LONG $0x7c10fcc5; WORD $0x2081 // vmovups    ymm7, yword [rcx + 4*rax + 32]
    LONG $0xc75c5cc5             // vsubps    ymm8, ymm4, ymm7
    LONG $0xe758dcc5             // vaddps    ymm4, ymm4, ymm7
    LONG $0x593cc1c4; BYTE $0xf8 // vmulps    ymm7, ymm8, ymm8
    LONG $0xc45e74c5             // vdivps    ymm8, ymm1, ymm4
    LONG $0xde59e4c5             // vmulps    ymm3, ymm3, ymm6
    LONG $0xf759bcc5             // vmulps    ymm6, ymm8, ymm7
    LONG $0x107cc1c4; WORD $0x807c; BYTE $0x20 // vmovups    ymm7, yword [r8 + 4*rax + 32]
    LONG $0x107c41c4; WORD $0x8144; BYTE $0x20 // vmovups    ymm8, yword [r9 + 4*rax + 32]
    LONG $0xdb54d4c5             // vandps    ymm3, ymm5, ymm3
    LONG $0x5c44c1c4; BYTE $0xe8 // vsubps    ymm5, ymm7, ymm8
    LONG $0xff58bcc5             // vaddps    ymm7, ymm8, ymm7
    LONG $0xe0c2dcc5; BYTE $0x0c // vcmpneq_oqps    ymm4, ymm4, ymm0
    LONG $0xe654dcc5             // vandps    ymm4, ymm4, ymm6
    LONG $0xf75ef4c5             // vdivps    ymm6, ymm1, ymm7
    LONG $0xd358ecc5             // vaddps    ymm2, ymm2, ymm3
    LONG $0xdd59d4c5             // vmulps    ymm3, ymm5, ymm5
    LONG $0xde59e4c5             // vmulps    ymm3, ymm3, ymm6
    LONG $0xe8c2c4c5; BYTE $0x0c // vcmpneq_oqps    ymm5, ymm7, ymm0
    LONG $0xd458ecc5             // vaddps    ymm2, ymm2, ymm4
    LONG $0xdb54d4c5             // vandps    ymm3, ymm5, ymm3
    LONG $0xd358ecc5             // vaddps    ymm2, ymm2, ymm3
    LONG $0x08c08348             // add    rax, 8
    LONG $0x00f83d48; WORD $0x0000 // cmp    rax, 248
	JB LBB0_1
    LONG $0x117cc1c4; BYTE $0x12 // vmovups    yword [r10], ymm2
    SUBQ $8, SP
    VZEROUPPER
    RET
